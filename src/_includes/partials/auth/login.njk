<div
  class="relative z-[500]"
  aria-labelledby="modal-title"
  role="dialog"
  aria-modal="true"
  x-show="showAuthLoginModal"
  x-data="dataLogin()"
  x-cloak="x-cloak">
  <!-- Background backdrop, show/hide based on modal state.
  
  Entering: "ease-out duration-300"
      From: "opacity-0"
      To: "opacity-100"
  Leaving: "ease-in duration-200"
      From: "opacity-100"
      To: "opacity-0" -->
  <div
    x-show="showAuthLoginModal"
    x-transition:enter=" ease-out duration-300 "
    x-transition:enter-start="opacity-0 "
    x-transition:enter-end="opacity-100  "
    x-transition:leave=" ease-in duration-200 "
    x-transition:leave-start="opacity-100 "
    x-transition:leave-end="opacity-0 "
    class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity backdrop-filter backdrop-blur-sm"></div>
  <div class="fixed z-10 inset-0 overflow-y-auto">
    <div
      class="flex items-end sm:items-center justify-center min-h-full p-4 text-center sm:p-0">
      <!-- Modal panel, show/hide based on modal state.
      
      Entering: "ease-out duration-300"
          From: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
          To: "opacity-100 translate-y-0 sm:scale-100"
      Leaving: "ease-in duration-200"
          From: "opacity-100 translate-y-0 sm:scale-100"
          To: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" -->
      <div
        @click.outside="showAuthLoginModal = false"
        x-show="showAuthLoginModal"
        x-transition:enter=" ease-out duration-300 "
        x-transition:enter-start="opacity-0 translate-y-4 md:translate-y-0 md:scale-95 "
        x-transition:enter-end="opacity-100 translate-y-0 md:scale-100  "
        x-transition:leave=" ease-in duration-200 "
        x-transition:leave-start="opacity-100 translate-y-0 md:scale-100 "
        x-transition:leave-end="opacity-0 translate-y-4 md:translate-y-0 md:scale-95 "
        class="relative bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8
          sm:max-w-md sm:w-full sm:p-6 dark:bg-gray-900">
        <!-- This example requires Tailwind CSS v2.0+ This example requires some changes to your config: ``` //
        tailwind.config.js module.exports = {
            // ...
            plugins: [
              // ...
              require('@tailwindcss/forms'),
            ],
        } ``` -->
        <!-- This example requires updating your template:
        
        ``` <html class="h-full bg-gray-50"> <body class="h-full"> ``` -->
          <div class="min-h-full flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8"> <div class="max-w-md w-full space-y-8">
            <div>
              {# <img class="mx-auto h-12 w-auto" src="https://tailwindui.com/img/logos/workflow-mark-indigo-600.svg" alt="Workflow"> #}
              <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-gray-100">Log in to your account</h2>
              {# <p class="mt-2 text-center text-sm text-gray-600">
                                            Or
                                            <a href="#" class="font-medium text-indigo-600 hover:text-indigo-500">
                                              start your 14-day free trial
                                            </a>
                                          </p> #}
            </div>
            <form @submit.prevent="submit" class="mt-8 space-y-6" action="#" method="POST">
              <input type="hidden" name="remember" value="true">
              <div class="rounded-md shadow-sm -space-y-px">
                <div>
                  <label for="email-address-login-comment" class="sr-only">Email address</label>
                  <input
                    x-model="email"
                    id="email-address-login-comment"
                    name="email"
                    type="email"
                    autocomplete="email"
                    required
                    class="dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 appearance-none rounded-none relative block w-full px-3
                      py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500
                      focus:border-indigo-500 focus:z-10 sm:text-sm"
                    placeholder="Email address">
                </div>
                <div>
                  <label for="password-login-comment" class="sr-only">Password</label>
                  <input
                    x-model="password"
                    id="password-login-comment"
                    name="password"
                    type="password"
                    autocomplete="current-password"
                    required
                    class="dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 appearance-none rounded-none relative block w-full px-3
                      py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500
                      focus:border-indigo-500 focus:z-10 sm:text-sm"
                    placeholder="Password">
                </div>
              </div>
              {# <div class="flex items-center justify-between">
                                            <div class="flex items-center">
                                              <input
                                                id="remember-me"
                                                name="remember-me"
                                                type="checkbox"
                                                class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                                              <label for="remember-me" class="ml-2 block text-sm text-gray-900">
                                                Remember me
                                              </label>
                                            </div>
                                            <div class="text-sm">
                                              <a href="#" class="font-medium text-indigo-600 hover:text-indigo-500">
                                                Forgot your password?
                                              </a>
                                            </div>
                                          </div> #}
              <div>
                <button
                  :disabled="isFetching"
                  type="submit"
                  class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md
                    text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                  <span
                    class="absolute left-0 inset-y-0 flex items-center pl-3">
                    <!-- Heroicon name: solid/lock-closed -->
                    <svg
                      x-show="!isFetching"
                      class="h-5 w-5 text-indigo-500 group-hover:text-indigo-400"
                      xmlns="http://www.w3.org/2000/svg"
                      viewbox="0 0 20 20"
                      fill="currentColor"
                      aria-hidden="true">
                      <path
                        fill-rule="evenodd"
                        d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z"
                        clip-rule="evenodd"/>
                    </svg>
                    <svg
                      x-show="isFetching"
                      class="animate-spin h-5 w-5 text-white"
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewbox="0 0 24 24">
                      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                      <path
                        class="opacity-75"
                        fill="currentColor"
                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                  </span>
                  Log in
                </button>
                <template x-if="error">
                  <div class="flex items-center py-2 px-3 border border-transparent text-sm font-medium rounded-md text-red-100 bg-red-600 mt-1">
                    <span class="h-6 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewbox="0 0 20 20" fill="currentColor">
                        <path
                          fill-rule="evenodd"
                          d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                          clip-rule="evenodd"/>
                      </svg>
                    </span>
                    <span class="ml-2" x-text="error"></span>
                  </div>
                </template>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
  function dataLogin() {
    return {
      error: '',
      isFetching: false,
      submit() {
        this.registerEvent('login', 'click')
        this.isFetching = true
        this.error = ''
        var data = {
          email: this.email,
          password: this.password
        }
        fetch('/api/auth?mode=login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        })
          .then((response) => response.json())
          .then((message) => {
            if (!message.success) {
              this.error = message.error
              this.isFetching = false
            }
             else {
              this.showAuthLoginModal = false
              this.showCommentsPanel = true;
              localStorage.setItem('crdacode_token', message.user.token);
              Alpine.store('auth').setUser(message.user)
            }
          })
          .catch((error) => {
            this.error = error
            this.isFetching = false
          })
      }
    }
  }
</script>